[INFO] --- kotlin-maven-plugin:0.1-SNAPSHOT:compile (process-sources) @ kotlin-ru.benchmark ---
[INFO] --- jmh-generator-maven-plugin:0.5.2:generate (default) @ kotlin-ru.benchmark ---
[INFO] --- build-helper-maven-plugin:1.8:add-source (add-source) @ kotlin-ru.benchmark ---
[INFO] --- maven-resources-plugin:2.3:resources (default-resources) @ kotlin-ru.benchmark ---
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ kotlin-ru.benchmark ---


mvn archetype:generate \
          -DinteractiveMode=false \
          -DarchetypeGroupId=org.openjdk.jmh \
          -DarchetypeArtifactId=jmh-java-ru.benchmark-archetype \
          -DgroupId=org.sample \
          -DartifactId=java-test \
          -Dversion=1.0


mvn archetype:generate \
          -DinteractiveMode=false \
          -DarchetypeGroupId=org.openjdk.jmh \
          -DarchetypeArtifactId=jmh-kotlin-ru.benchmark-archetype \
          -DgroupId=org.sample \
          -DartifactId=kotlin-test \
          -Dversion=1.0


Bad converting:
-constructor args
-Switch/case двойные
-abstract class few constructors
-finds strange classes from another package
-very strange reaction on classes with same name and diff packages
-no package checks
-on system.exit don't check next


java -jar target/microbenchmarks.jar ".*Fib.*" -wi 5 -f 2 -i 5 -tu ms -bm avgt

o.FibKt.fibIfBenchmark                  avgt        10      392.287       10.848    ms/op
o.FibKt.fibIfBenchmarkKt                avgt        10      392.787        9.439    ms/op
o.FibKt.fibStaticIfBenchmark            avgt        10      427.135        2.994    ms/op
o.FibKt.fibStaticIfBenchmarkKt          avgt        10      387.400        0.733    ms/op
o.FibKt.fibStaticTernaryBenchmark       avgt        10      430.130        6.261    ms/op
o.FibKt.fibStaticTernaryBenchmarkKt     avgt        10      387.716        0.882    ms/op
o.FibKt.fibTernaryBenchmark             avgt        10      390.094        4.023    ms/op
o.FibKt.fibTernaryBenchmarkKt           avgt        10      387.893        0.820    ms/op



- Глупый вопрос: если у нас мавен использует snapshot, то его надо вручную иногда удалять из репозитория? чтобы поулчить новую версию?
- Что мы будем тестировать? новую джаву под старый таргет или под новый?



Benchmark                                                  (elemCount)   Mode   Samples         Mean   Mean error    Units
r.b.f.CollectionLooping.passObjectsSum                          100000   avgt         5      102.505        1.443    us/op
r.b.f.CollectionLooping.passObjectsForEachSimpleNullable        100000   avgt         5      104.717       14.569    us/op
r.b.f.CollectionLooping.passObjectsForEachSimple                100000   avgt         5      110.951       39.831    us/op
r.b.f.CollectionLooping.passObjectsIndexed                      100000   avgt         5      116.955        3.580    us/op
r.b.f.CollectionLooping.passObjectsIndexedNullable              100000   avgt         5      115.438       11.585    us/op
r.b.f.CollectionLooping.passObjectsReduceNullable               100000   avgt         5      725.064       31.198    us/op
r.b.f.CollectionLooping.passObjectsReduceNullable2              100000   avgt         5      735.958       58.251    us/op
r.b.f.CollectionLooping.passObjectsReduce                       100000   avgt         5      742.492       57.105    us/op
r.b.f.CollectionLooping.passObjectsSumNullable                  100000   avgt         5     1560.723       29.400    us/op


[INFO] ------------------------------------------------------------------------
r.b.f.CollectionLooping.passObjectsForEachSimple          1000   avgt         5        0.957        0.065    us/op
r.b.f.CollectionLooping.passObjectsForEachSimple         10000   avgt         5        9.075        0.868    us/op
r.b.f.CollectionLooping.passObjectsForEachSimple        100000   avgt         5       95.909        8.806    us/op
r.b.f.CollectionLooping.passObjectsIndexed                1000   avgt         5        0.879        0.026    us/op
r.b.f.CollectionLooping.passObjectsIndexed               10000   avgt         5        8.791        0.054    us/op
r.b.f.CollectionLooping.passObjectsIndexed              100000   avgt         5       92.694        1.719    us/op


